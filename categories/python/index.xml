<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on CDPS code club</title>
    <link>https://cdpscc.github.io/categories/python/index.xml</link>
    <description>Recent content in Python on CDPS code club</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://cdpscc.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Debugging Python</title>
      <link>https://cdpscc.github.io/python/debugging/</link>
      <pubDate>Sat, 18 Mar 2017 14:37:12 +1300</pubDate>
      
      <guid>https://cdpscc.github.io/python/debugging/</guid>
      <description>

&lt;h2 id=&#34;name-errors&#34;&gt;name errors&lt;/h2&gt;

&lt;p&gt;blah&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scratch vs Python Examples</title>
      <link>https://cdpscc.github.io/scratch-vs-python/</link>
      <pubDate>Sat, 18 Mar 2017 14:36:12 +1300</pubDate>
      
      <guid>https://cdpscc.github.io/scratch-vs-python/</guid>
      <description>

&lt;p&gt;This page is for comparing Scratch code to Python code to help you use your knowledge of one to help learn the other. They aren&amp;rsquo;t as different as you might think.&lt;/p&gt;

&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Comments are bits of text in the code that don&amp;rsquo;t do anything and are there for helping people reading the code to understand it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;// This is a Scratch comment.
// You can create them by right clicking on the script background or a code block.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This is a Python comment.
# Anything after a hash symbol (#) on a line is a comment
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;h3 id=&#34;set-a-number-variable&#34;&gt;Set a number variable&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;set (age) to [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-a-text-variable&#34;&gt;Set a text variable&lt;/h3&gt;

&lt;p&gt;In computer language a chunk of text is also called a &lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;set (name) to [Scratch]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Python, a string variable needs to be wrapped in quote marks. They can be either single or double quotes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Scratch&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &amp;quot;Scratch&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double quotes are good if you want to put a single quote or apostrophe in your string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;telling_off = &amp;quot;Don&#39;t pick your nose!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise Python can&amp;rsquo;t tell the difference between the apostrophe and the end of the string.&lt;/p&gt;

&lt;h3 id=&#34;add-a-number-on-to-a-variable-the-long-way&#34;&gt;Add a number on to a variable (the long way)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;set (score) to ((score) + (10))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;score = score + 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-a-number-on-to-a-variable-the-short-way&#34;&gt;Add a number on to a variable (the short way)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;change (score) by [10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;score += 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;subtract-a-number-from-a-variable-the-short-way&#34;&gt;Subtract a number from a variable (the short way)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;change (score) by [-10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;score -= 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-strings-to-each-other&#34;&gt;Adding strings to each other&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;set (full name) to (join (first name) (last name))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;full_name = first_name + last name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;input-and-output&#34;&gt;Input and Output&lt;/h2&gt;

&lt;h3 id=&#34;display-some-text-on-the-screen&#34;&gt;Display some text on the screen:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;say [Hello world!]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello world!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ask-for-some-text-and-display-it&#34;&gt;Ask for some text and display it:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;ask [How many cookies can you eat?] and wait
say (join (answer) [ cookies is a lot! ])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cookies = input(&#39;How many cookies can you eat?&#39;)
print(cookies + &#39; cookies is a lot!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-code&#34;&gt;Custom code&lt;/h2&gt;

&lt;p&gt;If you have some code that gets repeated a lot, it is a good idea to make a reusable block of code you can call from other bits of code. In Scratch these are called custom blocks, and in Python they are called functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;define greeting (name)
say (join [Hello ] (name))

when flag clicked
greeting [Matilda]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Python &lt;code&gt;def&lt;/code&gt; is short for &amp;lsquo;define function&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def greeting(name):
    print(&amp;quot;Hello &amp;quot; + name)

greeting(&#39;Matilda&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comparisons&#34;&gt;Comparisons&lt;/h2&gt;

&lt;p&gt;Comparisons are tests where the answer can only be True or False. They can can be used as conditions in decisions or loops.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;&amp;lt; (age) = (10) &amp;gt; // Check age equals 10

&amp;lt; (age) &amp;gt; (10) &amp;gt; // Check age is greater than 10

&amp;lt; (age) &amp;lt; (10) &amp;gt; // Check age is less than 10

&amp;lt; not &amp;lt; (age) = (10) &amp;gt;&amp;gt; // Check age does NOT equal 10

&amp;lt; &amp;lt;(age) &amp;gt; (5)&amp;gt; and &amp;lt;(age) &amp;lt; (15)&amp;gt; &amp;gt; // Check age is greater than 5 and less than 15

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age == 10

age &amp;gt; 10

age &amp;lt; 10

age != 10

age &amp;gt; 5 and age &amp;lt; 15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Python a double &lt;code&gt;==&lt;/code&gt; is for comparing if two things are equal, while a single &lt;code&gt;=&lt;/code&gt; is for setting a variable to a value.&lt;/p&gt;

&lt;h2 id=&#34;decisions&#34;&gt;Decisions&lt;/h2&gt;

&lt;h3 id=&#34;if-then&#34;&gt;if then&lt;/h3&gt;

&lt;p&gt;Use this code when you want something to happen only if the condition is True.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;if &amp;lt; (age) &amp;gt; (20) &amp;gt; then
  say [You&#39;re old! ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if age &amp;gt; 20:
    print(&amp;quot;You&#39;re old!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;if-then-else&#34;&gt;if then else&lt;/h3&gt;

&lt;p&gt;Use this code when you want two different things to happen depending on whether the condition is True or False.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;if &amp;lt; (age) &amp;gt; (20) &amp;gt; then
  say [You&#39;re old! ]
else
  say [You&#39;re young ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if age &amp;gt; 20:
    print(&amp;quot;You&#39;re old!&amp;quot;)
else:
    print(&amp;quot;You&#39;re young&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loops&#34;&gt;Loops&lt;/h2&gt;

&lt;h3 id=&#34;loop-forever&#34;&gt;Loop forever&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;forever
  do something :: looks
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    something()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loop-until&#34;&gt;Loop until&lt;/h3&gt;

&lt;p&gt;The Scratch loop runs while the condition is False, but the Python loop runs while the condition is True. This is why each one has a different condition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;repeat until &amp;lt; (score) = (0) &amp;gt;
  do something :: looks
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while score &amp;gt; 0:
    something()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loop-a-number-of-times&#34;&gt;Loop a number of times&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-blocks&#34;&gt;repeat (7)
  do something :: looks
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(7):
    something()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>